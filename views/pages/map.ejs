<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Places Search Box</title>

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
    </script>
    <link rel="shortcut icon" type="image/png" href="assets/onetrip_logo_small.png">

    <link rel="stylesheet" type="text/css" href="css/map.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/7.14.4/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/7.14.4/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/7.14.4/firebase-firestore.js"></script>
    <script>
        var firebaseConfig = {
            apiKey: "AIzaSyCmidJ7Dopj865jlAM7w4Oh6mSvCIGdAJg",
            authDomain: "onetrip-5349f.firebaseapp.com",
            databaseURL: "https://onetrip-5349f.firebaseio.com",
            projectId: "onetrip-5349f",
            storageBucket: "onetrip-5349f.appspot.com",
            messagingSenderId: "752676431359",
            appId: "1:752676431359:web:1be0e9787cb5b10f9ef3ca",
            measurementId: "G-9EVM86CMWZ"
        };
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
    </script>

</head>

<body>
    <!-- 
        Navbar codes and styling are all referenced from Bootstrap.
        Authors: Bootstrap Team (team info at: https://github.com/orgs/twbs/people)
        URL: https://getbootstrap.com/docs/4.0/components/navbar/
    -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark sticky-top">
        <a class="navbar-brand" href="/">
            <img src="assets/onetrip_logo_small.png" class="d-inline-block align-top" alt="" width="40px" height="40px">
        </a>
        <a class="navbar-brand" href="/"> <span id="red">One</span> <span id="orange">Trip</span> </a>
        <button class="navbar-toggler" data-toggle="collapse" data-target="#collapse_target">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="collapse_target">

            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/#goals">Goals/Features</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/#about">About Us</a>
                </li>
            </ul>
        </div>
        <div class="navbar-collapse collapse order-3 dual-collapse2" id="collapse_target">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item" id="auth">
                    <a id="login-button" class="nav-link" href="signIn.ejs">Log In</a>
                </li>
                <li class="nav-item" id="auth">
                    <a id="signup-button" class="nav-link" href="signUp.ejs"><span class="glyphicon glyphicon-user"></span>Sign Up</a>
                </li>
                <li class="nav-item" id="auth">
                    <!-- <a class="nav-link" href="/" id="logout"><span class="glyphicon glyphicon-user"></span>Log Out</a> -->
                    <span class="nav-link" id="logout">Log Out</span>
                </li>
            </ul>
        </div>
    </nav>

    <h2>Nearby Stores</h2>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>

    <a href="marketlist.ejs" style="color: lightblue;">Click Here to See Wait Times</a>

    <div style="display: none">
        <div id="info-content">
            <table>
                <tr id="iw-url-row" class="iw_table_row">
                    <td id="iw-url"></td>
                </tr>
                <tr id="iw-address-row" class="iw_table_row">
                    <td class="iw_attribute_name">Address:</td>
                    <td id="iw-address"></td>
                </tr>
                <tr id="iw-phone-row" class="iw_table_row">
                    <td class="iw_attribute_name">Telephone:</td>
                    <td id="iw-phone"></td>
                </tr>
                <tr id="iw-rating-row" class="iw_table_row">
                    <td class="iw_attribute_name">Rating:</td>
                    <td id="iw-rating"></td>
                </tr>
                <tr id="iw-waiting-row" class="iw_table_row">
                    <td class="iw_attribute_name">Wait Time:</td>
                    <td id="iw-waiting"></td>
                </tr>
                <tr id="iw-storelink-row" class="iw_table_row">
                    <td id="iw-icon" class="iw_table_icon"></td>
                    <td id="iw-storelink"></td>
                </tr>
            </table>
        </div>
    </div>
    <script id="LogoutScript">
        // Adds functionality to the log out button
        $("#logout").click(function() {
            firebase.auth().signOut();
            window.location.replace("/");
        });
    </script>
    <script>
        /** 
         * The following lines of code in this script were written following the framework given in 
         * the Place Autocomplete Hotel Search page of Google Maps Platform for Developers.
         * Attribution:  Place Autocomplete Hotel Search | Maps Javascript API
         * Source: https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-hotelsearch
         */

        // Initialize the variables to be used within the callback function
        let map, service, infoWindow, searchBox;

        function filterStoreName(storename) {
            switch (storename) {
                case "Walmart Supercentre":
                    return "Walmart";
                case "Real Canadian Superstore":
                    return "Superstore";
                case "Costco Wholesale":
                    return "Costco";
                case "Whole Foods Market":
                    return "Whole Foods";
                default:
                    return storename;
            }
        }

        // The callback function that the async defer script calls for
        function initAutocompleteMap() {

            // If geolocation can be used (if the browser supports it), do the following
            if ('geolocation' in navigator) {
                navigator.geolocation.getCurrentPosition((pos) => {

                    // Create a new Google Map object and append it to the #map div
                    // Also, use the lat and lng provided from the geolocation api to center the map
                    map = new google.maps.Map(document.getElementById('map'), {
                        center: {
                            lat: pos.coords.latitude,
                            lng: pos.coords.longitude
                        },
                        zoom: 13,
                        mapTypeId: 'roadmap'
                    });

                    // Create a new Map Marker object and place it at the detected location on the map
                    current_marker = new google.maps.Marker({
                        map: map,
                        position: {
                            lat: pos.coords.latitude,
                            lng: pos.coords.longitude
                        }
                    });

                    // Create a new Map Info Window object, and pre-populate it with the format of #info-content div
                    infoWindow = new google.maps.InfoWindow({
                        content: document.getElementById('info-content')
                    });

                    // Initialize a new PlacesService object, which can be used with Google's Places Library
                    // to get place details and necessary information to be displayed.
                    service = new google.maps.places.PlacesService(map);

                    // Create the search box and link it to the UI element.
                    let input = document.getElementById('pac-input');
                    searchBox = new google.maps.places.SearchBox(input);

                    // Bias the search results towards current map's viewport
                    map.addListener('bounds_changed', function() {
                        searchBox.setBounds(map.getBounds());
                    });

                    let markers = [];

                    // Attribution: Autocomplete for Addresses and Search Terms | Maps JavaScript API
                    // Framework Source: https://developers.google.com/maps/documentation/javascript/places-autocomplete#get_searchbox_information
                    searchBox.addListener('places_changed', function() {
                        let places = searchBox.getPlaces();

                        if (places.length == 0) {
                            return;
                        }

                        // Clear out the old markers.
                        markers.forEach(function(marker) {
                            marker.setMap(null);
                        });
                        markers = [];

                        // Store the new bounds (in lat, lng format) into bounds
                        let bounds = new google.maps.LatLngBounds();

                        // For each place, get the icon, name and location.
                        // Attribution: Markers | Maps JavaScript API | Google Developers 
                        // Framework Source: https://developers.google.com/maps/documentation/javascript/markers#complex_icons
                        places.forEach(function(place) {

                            // If a place does not have the geometric location, console log a message and do not
                            // set up a marker.
                            if (!place.geometry) {
                                console.log("Returned place contains no geometry");
                                return;
                            }

                            // Set up the marker_icon
                            let marker_icon = {
                                url: place.icon,
                                size: new google.maps.Size(71, 71),
                                origin: new google.maps.Point(0, 0),
                                anchor: new google.maps.Point(17, 34),
                                scaledSize: new google.maps.Size(25, 25)
                            };

                            // Create a marker for each place, and push it into the markers array
                            markers.push(new google.maps.Marker({
                                map: map,
                                icon: marker_icon,
                                placeId: place.place_id,
                                vicinity: place.vicinity,
                                animation: google.maps.Animation.DROP,
                                title: place.name,
                                position: place.geometry.location
                            }));

                            if (place.geometry.viewport) {
                                bounds.union(place.geometry.viewport);
                            } else {
                                bounds.extend(place.geometry.location);
                            }
                        });

                        // For all of the markers, add an eventListener
                        for (let i = 0; i < markers.length; i++) {
                            google.maps.event.addListener(markers[i], 'click', () => {

                                service.getDetails({
                                    placeId: markers[i].placeId,
                                    fields: ['name', 'rating', 'formatted_phone_number', 'geometry', 'vicinity', 'address_components']
                                }, async(place, status) => {
                                    if (status !== google.maps.places.PlacesServiceStatus.OK) {
                                        return;
                                    }
                                    let vicinity = place['vicinity'];
                                    let lastIndex = (place['address_components'].length) - 1;
                                    let postal_Code = place['address_components'][lastIndex]["long_name"].split(' ')
                                    let postalCode = postal_Code[0] + postal_Code[1];
                                    let storeName = filterStoreName(place['name']);
                                    let phoneNum = place['formatted_phone_number'];
                                    let city = (place['address_components'].length) - 5;
                                    let storeCity = place['address_components'][city]["long_name"];
                                    console.log(vicinity, postalCode, storeName, "City:", storeCity, "phone:", phoneNum);

                                    const time_url = `/waittime/${postalCode}/${storeName}/${phoneNum}/${storeCity}`
                                    const response = await fetch(time_url);
                                    const json = await response.json();
                                    const waitTime = json.waittime;
                                    const storeID = json.storeid;

                                    infoWindow.open(map, markers[i]);
                                    buildIWContent(place, waitTime, storeID);
                                });
                            });
                        }

                        // Load the place information into the HTML elements used by the info window.
                        function buildIWContent(place, time, id) {
                            document.getElementById('iw-url').innerHTML = '<b><a href="' + place.url +
                                '">' + place.name + '</a></b>';
                            document.getElementById('iw-address').textContent = place.vicinity;
                            document.getElementById('iw-waiting').textContent = time + ' minutes';
                            document.getElementById('iw-storelink').innerHTML = `<b><a href="/storepage.ejs?storeid=${id}"><button>Select Store</button></a></b>`;


                            if (place.formatted_phone_number) {
                                document.getElementById('iw-phone-row').style.display = '';
                                document.getElementById('iw-phone').textContent =
                                    place.formatted_phone_number;
                            } else {
                                document.getElementById('iw-phone-row').style.display = 'none';
                            }

                            // Display the rating of the stores using black (&#10025;) and white (&#10029;) stars
                            if (place.rating) {
                                var ratingHtml = '';
                                for (var i = 0; i < 5; i++) {
                                    if (place.rating < (i + 0.5)) {
                                        ratingHtml += '&#10025;';
                                    } else {
                                        ratingHtml += '&#10029;';
                                    }
                                    document.getElementById('iw-rating-row').style.display = '';
                                    document.getElementById('iw-rating').innerHTML = ratingHtml;
                                }
                            } else {
                                document.getElementById('iw-rating-row').style.display = 'none';
                            }
                        }
                        map.fitBounds(bounds);
                    });

                });
            } else {
                alert("Your browser does not support Geolocation. Please use Chrome for the best experience.");
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMN5A6BZM022m3zZ35SsgwJWlTW3SGL4g&libraries=places&callback=initAutocompleteMap" async defer></script>

    <script>
        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);

        $('#signup-btn').click(function() {
            var email = $("#inputEmail").val();
            var password = $("#inputPassword").val();
            var confirmPassword = $("#inputConfirmPassword").val();
            console.log("email: " + email + ", password: " + password);


            if (password == confirmPassword) {
                var result = firebase.auth().createUserWithEmailAndPassword(email, password);
                result.catch(function(error) {
                    var errorCode = error.code;
                    var errorMessage = error.message;
                    console.log(errorCode);
                    console.log(errorMessage);
                })
            } else {
                window.alert("Passwords do not match");
            }
        });

        $('#signin-btn').click(function() {
            var email = $("#inputEmail").val();
            var password = $("#inputPassword").val();
            var result = firebase.auth().signInWithEmailAndPassword(email, password);
            result.catch(function(error) {
                var errorCode = error.code;
                var errorMessage = error.message;
                console.log(errorCode);
                console.log(errorMessage);
            })
        });

        $("#logout").click(function() {
            firebase.auth().signOut();
            window.location.replace("/");
        });

        firebase.auth().onAuthStateChanged(function(user) {
            if (user) {
                console.log(user.email);
                console.log(user.uid);
                document.getElementById("login-button").style.display = "none";
                document.getElementById("signup-button").style.display = "none";
            } else {
                console.log("you are not logged in");
                document.getElementById("logout").style.display = "none";
            }
        });
    </script>
</body>

</html>